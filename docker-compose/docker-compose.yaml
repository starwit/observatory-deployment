name: observatory-stack

services:
  timescale-db:
    image: timescale/timescaledb:latest-pg17
    container_name: timescale-db
    environment:
      - POSTGRES_PASSWORD=supersecret
    volumes:
      - ./timescaledb/custom_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "30001:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  observatory:
    image: ${IMAGE_REGISTRY}/observatory:${OBSERVATORY_VERSION}
    container_name: observatory
    environment:
      SERVER_PORT: 8080
      SAE_REDISHOST: myvalkey
      SPRING_DATASOURCE_URL: jdbc:postgresql://timescale-db:5432/observatory
      ANALYTICS_DATASOURCE_URL: jdbc:postgresql://timescale-db:5432/analytics
    depends_on:
      - timescale-db
    networks:
      - backend

  observatory-config:
    image: ${IMAGE_REGISTRY}/observatory-config:${OBSERVATORY_CONFIG_VERSION}
    container_name: observatory-config
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://timescale-db:5432/observatoryconfig
      SPRING_DATASOURCE_USERNAME: observatoryconfig
      SPRING_DATASOURCE_PASSWORD: observatoryconfig
      OBSERVATORY_URL: http://observatory:8080/observatory
    ports:
      - "8080:8080"
    depends_on:
      - timescale-db
    networks:
      - backend        

  visualizer:
    image: ${IMAGE_REGISTRY}/sae-visualizer:${VISUALIZER_VERSION}
    container_name: visualizer
    environment:
      SERVER_PORT: 8080
      SPRING.REDIS.HOST: myvalkey
    ports:
      - "8081:8080"
    networks:
      - backend

  myvalkey:
    image: valkey/valkey:latest
    container_name: valkey
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=supersecret
    volumes:
       - ./grafana:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - timescale-db
    networks:
      - backend

networks:
  backend:
    driver: bridge